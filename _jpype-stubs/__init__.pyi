import types
import typing
import jpype
from java.lang import Class # type: ignore

__version__: str

class _JArray(_JObject):
    length: jpype.JInt
    def __init__(self, *args, **kwargs) -> None: ...
    def __buffer__(self, *args, **kwargs): ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class _JArrayPrimitive(_JArray):
    def __buffer__(self, *args, **kwargs): ...
    def __release_buffer__(self, *args, **kwargs): ...

class _JBoolean(int, _JObject):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __delattr__(self, name): ...
    def __eq__(self, other: object) -> bool: ...
    def __float__(self) -> float: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    @classmethod
    def __init_subclass__(cls, *args, internal: bool, **kwargs): ...
    def __int__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __setattr__(self, name, value): ...

class _JBuffer(_JObject):
    def __buffer__(self, *args, **kwargs): ...
    def __release_buffer__(self, *args, **kwargs): ...

class _JChar(str, _JObject):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __abs__(self): ...
    def __add__(self, other): ...
    def __and__(self, other): ...
    def __bool__(self) -> bool: ...
    def __delattr__(self, name): ...
    def __divmod__(self, other): ...
    def __eq__(self, other: object) -> bool: ...
    def __float__(self) -> float: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __invert__(self): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lshift__(self, other): ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __or__(self, other): ...
    def __pos__(self): ...
    def __radd__(self, other): ...
    def __rand__(self, other): ...
    def __rdivmod__(self, other): ...
    def __rfloordiv__(self, other): ...
    def __rlshift__(self, other): ...
    def __rmul__(self, other): ...
    def __ror__(self, other): ...
    def __rrshift__(self, other): ...
    def __rshift__(self, other): ...
    def __rsub__(self, other): ...
    def __rxor__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __xor__(self, other): ...
    @classmethod
    def __init_subclass__(cls, *args, internal: bool, **kwargs): ...

class _JClass(type):
    class_: Class
    def __init__(self, *args, **kwargs) -> None: ...
    def mro(self, *args, **kwargs): ...
    def __del__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name): ...
    def __getitem__(self, index): ...
    def __imatmul__(self, *args, **kwargs): ...
    def __instancecheck__(self, *args, **kwargs): ...
    def __matmul__(self, *args, **kwargs): ...
    @classmethod
    def __prepare__(cls, *args, **kwargs): ...
    def __rmatmul__(self, *args, **kwargs): ...
    def __setattr__(self, name, value): ...
    def __subclasscheck__(self, *args, **kwargs): ...

class _JClassHints:
    def __init__(self, *args, **kwargs) -> None: ...

class _JComparable(_JObject):
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class _JException(Exception, _JObject):
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name): ...
    def __setattr__(self, name, value): ...

class _JField:
    def __delete__(self, *args, **kwargs): ...
    def __get__(self, instance, owner): ...
    def __set__(self, instance, value): ...

class _JMethod(function):
    def matchReport(self, *args, **kwargs): ...
    def __call__(self, *args, **kwargs): ...
    def __get__(self, instance, owner): ...

class _JMonitor:
    def __init__(self, *args, **kwargs) -> None: ...
    def __enter__(self): ...
    def __exit__(self, type: type[BaseException] | None, value: BaseException | None, traceback: types.TracebackType | None): ...

class _JNumberFloat(float, _JObject):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __delattr__(self, name): ...
    def __eq__(self, other: object) -> bool: ...
    def __float__(self) -> float: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    @classmethod
    def __init_subclass__(cls, *args, internal: bool, **kwargs): ...
    def __int__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __setattr__(self, name, value): ...

class _JNumberLong(int, _JObject):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __delattr__(self, name): ...
    def __eq__(self, other: object) -> bool: ...
    def __float__(self) -> float: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    @classmethod
    def __init_subclass__(cls, *args, internal: bool, **kwargs): ...
    def __int__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __setattr__(self, name, value): ...

class _JObject:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __del__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    @classmethod
    def __init_subclass__(cls, *args, **kwargs): ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __setattr__(self, name, value): ...

class _JPackage(types.ModuleType):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __call__(self, *args, **kwargs): ...
    def __dir__(self): ...
    def __imatmul__(self, *args, **kwargs): ...
    def __matmul__(self, *args, **kwargs): ...
    def __rmatmul__(self, *args, **kwargs): ...

class _JProxy:
    __javaclass__: jpype.JClass
    __javainst__: typing.Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def equals(self, *args, **kwargs): ...
    def hashCode(self, *args, **kwargs): ...
    def toString(self, *args, **kwargs): ...

def arrayFromBuffer(*args, **kwargs): ...
def attachThreadAsDaemon(*args, **kwargs): ...
def attachThreadToJVM(*args, **kwargs): ...
def convertToDirectBuffer(*args, **kwargs): ...
def detachThreadFromJVM(*args, **kwargs): ...
def enableStacktraces(*args, **kwargs): ...
def examine(*args, **kwargs): ...
def gcStats(*args, **kwargs): ...
def isPackage(*args, **kwargs): ...
def isStarted(*args, **kwargs): ...
def isThreadAttachedToJVM(*args, **kwargs): ...
def shutdown(*args, **kwargs): ...
def startup(*args, **kwargs): ...
def trace(*args, **kwargs): ...
