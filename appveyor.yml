environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"
    ANT_HOME: "C:\\ProgramData\\chocolatey\\lib\\ant\\apache-ant-1.10.5"
    NUMPY_: "numpy x.x"
    #JAVA_HOME: "C:\\jdk8"
    JAVA_HOME: "C:\\Program Files\\Java\\jdk1.8.0"
    CINST_OPTS:

  matrix:

    - PYTHON: "C:\\Miniconda38-x64"
      CONDA_PY: "3.8.1"
      ARCH: x86_64

    - PYTHON: "C:\\Miniconda38"
      CONDA_PY: "3.8.1"
      ARCH: x86

    - PYTHON: "python3.7"
      CYGWIN: "C:\\cygwin64"
      ARCH: x86_64
      CYGSH: C:\Cygwin64\bin\bash -c

    - PYTHON: "C:\\Miniconda3"
      ARCH: x86
      CONDA_PY: "3-latest"

    - PYTHON: "C:\\Miniconda3-x64"
      CONDA_PY: "3-latest"
      ARCH: x86_64

    - PYTHON: "C:\\Miniconda35-x64"
      CONDA_PY: "3.5.2"
      ARCH: x86_64

    - PYTHON: "C:\\Miniconda35"
      CONDA_PY: "3.5.2"
      ARCH: x86

    - PYTHON: "C:\\Miniconda36-x64"
      CONDA_PY: "3.6.5"
      ARCH: x86_64

    - PYTHON: "C:\\Miniconda36"
      CONDA_PY: "3.6.5"
      ARCH: x86

    - PYTHON: "C:\\Miniconda37-x64"
      CONDA_PY: "3.7"
      ARCH: x86_64

    - PYTHON: "C:\\Miniconda37"
      CONDA_PY: "3.7"
      ARCH: x86

install:
  # Force java to be installed where JAVA_HOME points
  # We can install and test multiple versions of java here
  # - We will have to move the JAVA_HOME and the build of the harness to the test section.
  # - We will need to figure out how to run nose multiple times on the same run so that
  #   we can get the result from each of the java version runs.
  #
  #- cinst jdk8 -params 'installdir=C:\\jdk8' %CINST_OPTS%

  # - cinst jdk7 -params 'installdir=C:\\jdk7'
  # - cinst jdk9 -version 9.0.4.11 -params 'installdir=C:\\jdk9'
  - cinst ant %CINST_OPTS% --ignore-dependencies
  - refreshenv

  # Add thinges to path
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%ANT_HOME%\\bin;%PATH%"

  # If cygwin installed run install.sh, else run the install.ps1
  - "IF DEFINED CYGWIN (%CYGSH% appveyor/install.sh) ELSE (powershell ./appveyor/install.ps1)"

build: false # Not a C# project, build stuff at the test step instead.

test_script:
  #- "%CMD_IN_ENV% conda build devtools\\conda-recipe --numpy=112"
  # run testsuite and upload test results to AppVeyor; return exit code of testsuite
  - "IF DEFINED CYGWIN (%CYGSH% appveyor/runTestSuite.sh) ELSE (powershell ./appveyor/runTestSuite.ps1)"

on_finish:
  # upload results to AppVeyor
  - "powershell ./appveyor/upload.ps1"

#  - ps: $wc = New-Object 'System.Net.WebClient'; $wc.UploadFile('https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)', (Resolve-Path .\xunit.xml))
#
#on_finish:
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

artifacts:
  - path: 'dist\*.whl'
    name:  wheels
